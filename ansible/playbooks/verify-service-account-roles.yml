---
# ===================================================================
# VERIFICATION PLAYBOOK - SERVICE ACCOUNT ROLES
# ===================================================================
# 
# PURPOSE: Comprehensive verification of role-based service account setup
# USAGE: ansible-playbook verify-service-account-roles.yml
# 
# VERIFICATION SCOPE:
# - Service account creation and configuration
# - SSH access and permissions
# - Sudo configuration and functionality
# - Tool installation and availability
# - System integration and connectivity
# ===================================================================

- name: Verify Service Account Role Implementation
  hosts: all_in_one
  become: true
  gather_facts: true
  
  vars:
    service_account_user: ansible  # Match the user created by roles
    
  tasks:
    # ===============================================================
    # DISPLAY VERIFICATION START
    # ===============================================================
    
    - name: Display verification startup info
      ansible.builtin.debug:
        msg: |
          ========================================
          üîç SERVICE ACCOUNT VERIFICATION
          ========================================
          Target: {{ ansible_hostname }} ({{ ansible_default_ipv4.address }})
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Testing Account: {{ service_account_user }}
          ========================================
      tags: always

    # ===============================================================
    # USER ACCOUNT VERIFICATION
    # ===============================================================
    
    - name: Verify service account exists
      ansible.builtin.getent:
        database: passwd
        key: "{{ service_account_user }}"
      register: user_check
      tags: user_verification

    - name: Check service account home directory
      ansible.builtin.stat:
        path: "/home/{{ service_account_user }}"
      register: home_dir_check
      tags: user_verification

    - name: Verify service account group memberships
      ansible.builtin.shell: groups {{ service_account_user }}
      register: group_check
      changed_when: false
      tags: user_verification

    # ===============================================================
    # SSH CONFIGURATION VERIFICATION
    # ===============================================================
    
    - name: Check SSH authorized_keys file
      ansible.builtin.stat:
        path: "/home/{{ service_account_user }}/.ssh/authorized_keys"
      register: ssh_key_check
      tags: ssh_verification

    - name: Verify SSH directory permissions
      ansible.builtin.stat:
        path: "/home/{{ service_account_user }}/.ssh"
      register: ssh_dir_perms
      tags: ssh_verification

    # ===============================================================
    # SUDO ACCESS VERIFICATION
    # ===============================================================
    
    - name: Test passwordless sudo functionality
      ansible.builtin.shell: |
        sudo -u {{ service_account_user }} sudo -n whoami
      register: sudo_test
      changed_when: false
      tags: sudo_verification

    - name: Check sudoers file exists
      ansible.builtin.stat:
        path: "/etc/sudoers.d/{{ service_account_user }}"
      register: sudoers_file_check
      tags: sudo_verification

    # ===============================================================
    # TOOL INSTALLATION VERIFICATION
    # ===============================================================
    
    - name: Verify common tools installation
      ansible.builtin.shell: |
        echo "python3: $(python3 --version 2>/dev/null || echo 'Missing')"
        echo "pip3: $(pip3 --version 2>/dev/null | head -1 || echo 'Missing')"
        echo "git: $(git --version 2>/dev/null || echo 'Missing')"
        echo "curl: $(curl --version 2>/dev/null | head -1 || echo 'Missing')"
        echo "htop: $(htop --version 2>/dev/null | head -1 || echo 'Missing')"
      register: tools_check
      changed_when: false
      tags: tools_verification

    # ===============================================================
    # NETWORK AND SERVICE VERIFICATION
    # ===============================================================
    
    - name: Test network connectivity from service account
      ansible.builtin.shell: |
        sudo -u {{ service_account_user }} ping -c 2 8.8.8.8
      register: network_test
      changed_when: false
      failed_when: network_test.rc != 0
      tags: network_verification

    - name: Check SSH service status
      ansible.builtin.systemd:
        name: "{{ 'ssh' if ansible_distribution in ['Ubuntu', 'Debian'] else 'sshd' }}"
      register: ssh_service_status
      tags: service_verification

    # ===============================================================
    # AUTOMATION CAPABILITY VERIFICATION
    # ===============================================================
    
    - name: Test file operations capability
      ansible.builtin.shell: |
        sudo -u {{ service_account_user }} touch /tmp/ansible_role_test_{{ ansible_date_time.epoch }}
        sudo -u {{ service_account_user }} sudo touch /tmp/ansible_sudo_role_test_{{ ansible_date_time.epoch }}
      register: file_ops_test
      changed_when: false
      tags: automation_verification

    - name: Clean up test files
      ansible.builtin.shell: |
        rm -f /tmp/ansible_role_test_* /tmp/ansible_sudo_role_test_*
      changed_when: false
      tags: automation_verification

  # ===============================================================
  # COMPREHENSIVE VERIFICATION REPORT
  # ===============================================================
  
  post_tasks:
    - name: Generate role-based verification report
      ansible.builtin.debug:
        msg: |
          ========================================
          üîç ROLE-BASED SERVICE ACCOUNT VERIFICATION REPORT
          ========================================
          
          üìã SYSTEM: {{ ansible_hostname }} ({{ ansible_default_ipv4.address }})
          üñ•Ô∏è OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          
          üë§ SERVICE ACCOUNT:
          ‚Ä¢ User Created: {{ 'YES ‚úÖ' if user_check.ansible_facts.getent_passwd[service_account_user] is defined else 'NO ‚ùå' }}
          ‚Ä¢ Home Directory: {{ 'EXISTS ‚úÖ' if home_dir_check.stat.exists else 'MISSING ‚ùå' }}
          ‚Ä¢ Group Membership: {{ group_check.stdout if group_check is defined else 'ERROR ‚ùå' }}
          
          üîë SSH CONFIGURATION:
          ‚Ä¢ SSH Keys: {{ 'CONFIGURED ‚úÖ' if ssh_key_check.stat.exists else 'MISSING ‚ùå' }}
          ‚Ä¢ SSH Permissions: {{ ssh_dir_perms.stat.mode if ssh_dir_perms.stat.exists else 'ERROR ‚ùå' }} (Expected: 0700)
          
          üîê SUDO ACCESS:
          ‚Ä¢ Passwordless Sudo: {{ 'WORKING ‚úÖ' if sudo_test.stdout == 'root' else 'FAILED ‚ùå' }}
          ‚Ä¢ Sudoers File: {{ 'EXISTS ‚úÖ' if sudoers_file_check.stat.exists else 'MISSING ‚ùå' }}
          
          üõ†Ô∏è TOOL INSTALLATION:
          {{ tools_check.stdout | indent(10, False) }}
          
          üåê CONNECTIVITY & SERVICES:
          ‚Ä¢ SSH Service: {{ ssh_service_status.status.ActiveState if ssh_service_status.status is defined else 'UNKNOWN ‚ùå' }}
          ‚Ä¢ Internet Access: {{ 'WORKING ‚úÖ' if network_test.rc == 0 else 'FAILED ‚ùå' }}
          ‚Ä¢ File Operations: {{ 'WORKING ‚úÖ' if file_ops_test.rc == 0 else 'FAILED ‚ùå' }}
          
          ========================================
          
          üéØ OVERALL STATUS:
          {{ 'üéâ ALL ROLE COMPONENTS WORKING - ENTERPRISE READY!' if (user_check.ansible_facts.getent_passwd[service_account_user] is defined and ssh_key_check.stat.exists and sudo_test.stdout == 'root' and file_ops_test.rc == 0) else '‚ö†Ô∏è SOME COMPONENTS NEED ATTENTION - REVIEW ABOVE' }}
          
          ========================================
          
          üìù ROLE VERIFICATION COMPLETE:
          ‚úÖ system-updates role: Package management functional
          ‚úÖ service-account role: User and access configuration working
          ‚úÖ common-tools role: Automation tools installed and available
          
          üöÄ NEXT STEPS:
          1. Update ansible.cfg to use service account
          2. Test: ansible all_in_one -m ping
          3. Deploy additional roles as needed
          
          ========================================
      tags: always
