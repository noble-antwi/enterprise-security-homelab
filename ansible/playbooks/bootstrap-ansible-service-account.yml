---
# ===================================================================
# ANSIBLE SERVICE ACCOUNT BOOTSTRAP PLAYBOOK - GROUP ISSUE FIXED
# ===================================================================

- name: Bootstrap Ansible Service Account on All Lab Systems
  hosts: all_in_one
  become: true
  
  vars:
    ansible_service_user: ansible
    ansible_user_comment: "Ansible Automation Service Account"
    ansible_ssh_key: "{{ lookup('file', '~/.ssh/ansible-homelab-key.pub') }}"
  
  tasks:
    
    # ===============================================================
    # SECTION 1: SYSTEM UPDATES
    # ===============================================================
    
    - name: Update package cache on Ubuntu/Debian systems
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_distribution in ["Ubuntu", "Debian"]
      tags: always
      
    - name: Update package cache on Rocky/RHEL systems  
      ansible.builtin.dnf:
        update_cache: true
      when: ansible_distribution in ["Rocky", "RedHat", "CentOS"]
      tags: always
    
    # ===============================================================
    # SECTION 2: DISPLAY SYSTEM INFORMATION
    # ===============================================================
    
    - name: Display target system information
      ansible.builtin.debug:
        msg: |
          === CONFIGURING AUTOMATION ON ===
          System: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Hostname: {{ ansible_hostname }}
          IP Address: {{ ansible_default_ipv4.address }}
          Architecture: {{ ansible_architecture }}
          User being created: {{ ansible_service_user }}
      tags: always

    # ===============================================================
    # SECTION 3: CREATE THE ANSIBLE USER ACCOUNT (FIXED)
    # ===============================================================
    
    - name: Create ansible service user on Ubuntu/Debian systems
      ansible.builtin.user:
        name: "{{ ansible_service_user }}"
        comment: "{{ ansible_user_comment }}"
        shell: /bin/bash
        home: "/home/{{ ansible_service_user }}"
        create_home: true
        groups:
          - sudo
        append: true
        state: present
      when: ansible_distribution in ["Ubuntu", "Debian"]
      tags: user_creation

    - name: Create ansible service user on Rocky/RHEL systems
      ansible.builtin.user:
        name: "{{ ansible_service_user }}"
        comment: "{{ ansible_user_comment }}"
        shell: /bin/bash
        home: "/home/{{ ansible_service_user }}"
        create_home: true
        groups:
          - wheel
        append: true
        state: present
      when: ansible_distribution in ["Rocky", "RedHat", "CentOS"]
      tags: user_creation

    # ===============================================================
    # SECTION 4: SSH CONFIGURATION
    # ===============================================================
    
    - name: Create .ssh directory for ansible user
      ansible.builtin.file:
        path: "/home/{{ ansible_service_user }}/.ssh"
        state: directory
        owner: "{{ ansible_service_user }}"
        group: "{{ ansible_service_user }}"
        mode: '0700'
      tags: ssh_setup

    - name: Add SSH public key for ansible user
      ansible.builtin.authorized_key:
        user: "{{ ansible_service_user }}"
        key: "{{ ansible_ssh_key }}"
        comment: "Ansible Controller Key - {{ ansible_date_time.date }}"
        state: present
      tags: ssh_setup

    # ===============================================================
    # SECTION 5: SUDO CONFIGURATION (CRITICAL FOR AUTOMATION)
    # ===============================================================
    
    - name: Create sudoers file for ansible user
      ansible.builtin.copy:
        content: |
          # Ansible automation service account sudoers configuration
          # This allows passwordless sudo for automation
          {{ ansible_service_user }} ALL=(ALL) NOPASSWD: ALL
          
          # Don't require a TTY for automation
          Defaults:{{ ansible_service_user }} !requiretty
          
          # Created by Ansible Bootstrap: {{ ansible_date_time.iso8601 }}
        dest: "/etc/sudoers.d/{{ ansible_service_user }}"
        owner: root
        group: root
        mode: '0440'
        validate: 'visudo -cf %s'
      tags: sudo_config

    # ===============================================================
    # SECTION 6: SSH SERVICE VERIFICATION
    # ===============================================================
    
    - name: Ensure SSH service is enabled and started (Ubuntu/Debian)
      ansible.builtin.systemd:
        name: ssh
        enabled: true
        state: started
      when: ansible_distribution in ["Ubuntu", "Debian"]
      tags: security

    - name: Ensure SSH service is enabled and started (Rocky/RHEL)
      ansible.builtin.systemd:
        name: sshd
        enabled: true
        state: started
      when: ansible_distribution in ["Rocky", "RedHat", "CentOS"]
      tags: security

    # ===============================================================
    # SECTION 7: VERIFICATION TESTS
    # ===============================================================
    
    - name: Test ansible user sudo access
      ansible.builtin.shell: sudo -u {{ ansible_service_user }} sudo -n whoami
      register: sudo_test
      changed_when: false
      failed_when: sudo_test.stdout != "root"
      tags: verification

    - name: Display sudo verification result
      ansible.builtin.debug:
        msg: "‚úÖ SUCCESS: Ansible user sudo test returned: {{ sudo_test.stdout }} (Expected: root)"
      when: sudo_test.stdout == "root"
      tags: verification

    - name: Report sudo test failure
      ansible.builtin.debug:
        msg: "‚ùå FAILED: Ansible user sudo test returned: {{ sudo_test.stdout }} (Expected: root)"
      when: sudo_test.stdout != "root"
      tags: verification

    # ===============================================================
    # SECTION 8: INSTALL AUTOMATION TOOLS
    # ===============================================================
    
    - name: Install automation dependencies on Ubuntu/Debian
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - curl
          - wget
          - unzip
          - git
          - htop
        state: present
      when: ansible_distribution in ["Ubuntu", "Debian"]
      tags: dependencies

    - name: Enable EPEL repository on Rocky/RHEL
      ansible.builtin.dnf:
        name: epel-release
        state: present
      when: ansible_distribution in ["Rocky", "RedHat", "CentOS"]
      tags: dependencies

    - name: Install automation dependencies on Rocky/RHEL
      ansible.builtin.dnf:
        name:
          - python3
          - python3-pip
          - curl
          - wget
          - unzip
          - git
          - htop
        state: present
      when: ansible_distribution in ["Rocky", "RedHat", "CentOS"]
      tags: dependencies

    # ===============================================================
    # SECTION 9: COMPLETION REPORT
    # ===============================================================
    
    - name: Generate bootstrap completion report
      ansible.builtin.debug:
        msg: |
          ========================================
          ‚úÖ ANSIBLE SERVICE ACCOUNT BOOTSTRAP COMPLETE
          ========================================
          
          üéØ WHAT WAS CREATED:
          ‚Ä¢ User Account: {{ ansible_service_user }}
          ‚Ä¢ Home Directory: /home/{{ ansible_service_user }}
          ‚Ä¢ SSH Access: Configured with ansible-homelab-key
          ‚Ä¢ Sudo Access: Passwordless (NOPASSWD: ALL)
          
          üñ•Ô∏è SYSTEM DETAILS:
          ‚Ä¢ Hostname: {{ ansible_hostname }}
          ‚Ä¢ System: {{ ansible_distribution }} {{ ansible_distribution_version }}
          ‚Ä¢ IP Address: {{ ansible_default_ipv4.address }}
          
          üöÄ READY FOR AUTOMATION!
          Next: Update ansible.cfg to use this account
          ========================================
      tags: always

  handlers:
    - name: Restart SSH service
      ansible.builtin.systemd:
        name: "{{ 'ssh' if ansible_distribution in ['Ubuntu', 'Debian'] else 'sshd' }}"
        state: restarted

# ===================================================================
# END OF GROUP-FIXED PLAYBOOK
# ===================================================================